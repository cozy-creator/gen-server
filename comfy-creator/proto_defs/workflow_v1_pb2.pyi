"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class InputValue(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Null:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _NullEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[InputValue._Null.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        NULL_VALUE: InputValue._Null.ValueType  # 0

    class Null(_Null, metaclass=_NullEnumTypeWrapper): ...
    NULL_VALUE: InputValue.Null.ValueType  # 0

    @typing.final
    class InputStruct(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class FieldsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            @property
            def value(self) -> global___InputValue: ...
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: global___InputValue | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        FIELDS_FIELD_NUMBER: builtins.int
        @property
        def fields(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InputValue]: ...
        def __init__(
            self,
            *,
            fields: collections.abc.Mapping[builtins.str, global___InputValue] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["fields", b"fields"]) -> None: ...

    @typing.final
    class List(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        INPUTS_FIELD_NUMBER: builtins.int
        @property
        def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputValue]: ...
        def __init__(
            self,
            *,
            inputs: collections.abc.Iterable[global___InputValue] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["inputs", b"inputs"]) -> None: ...

    @typing.final
    class File(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        MIME_TYPE_FIELD_NUMBER: builtins.int
        CONTENTS_FIELD_NUMBER: builtins.int
        mime_type: builtins.str
        """e.g., 'image/png'"""
        contents: builtins.bytes
        """Raw bytes"""
        def __init__(
            self,
            *,
            mime_type: builtins.str = ...,
            contents: builtins.bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["contents", b"contents", "mime_type", b"mime_type"]) -> None: ...

    @typing.final
    class Tensor(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        NAME_FIELD_NUMBER: builtins.int
        DATATYPE_FIELD_NUMBER: builtins.int
        SHAPE_FIELD_NUMBER: builtins.int
        CONTENTS_FIELD_NUMBER: builtins.int
        name: builtins.str
        datatype: builtins.str
        """Data type of the elements, e.g., "float32" """
        contents: builtins.bytes
        """Raw tensor data"""
        @property
        def shape(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """dimensions, e.g., [1, 4, 512, 512]"""

        def __init__(
            self,
            *,
            name: builtins.str = ...,
            datatype: builtins.str = ...,
            shape: collections.abc.Iterable[builtins.int] | None = ...,
            contents: builtins.bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["contents", b"contents", "datatype", b"datatype", "name", b"name", "shape", b"shape"]) -> None: ...

    NULL_FIELD_NUMBER: builtins.int
    NUMBER_FIELD_NUMBER: builtins.int
    STRING_FIELD_NUMBER: builtins.int
    BOOL_FIELD_NUMBER: builtins.int
    TENSOR_FIELD_NUMBER: builtins.int
    FILE_RAW_FIELD_NUMBER: builtins.int
    FILE_PATH_FIELD_NUMBER: builtins.int
    FILE_URL_FIELD_NUMBER: builtins.int
    FILE_ID_FIELD_NUMBER: builtins.int
    OUTPUT_REF_FIELD_NUMBER: builtins.int
    STRUCT_FIELD_NUMBER: builtins.int
    LIST_FIELD_NUMBER: builtins.int
    null: global___InputValue.Null.ValueType
    number: builtins.float
    string: builtins.str
    bool: builtins.bool
    file_path: builtins.str
    """Can be:
    - relative file path (prod or local), `like public/abc123.png`
    - absolute file path (local only), `C:/Users/me/Documents/abc123.png`
    In prod, relative file-paths are assumed to refer to its public S3 bucket
    File-paths are like [file-system-location]/path/to/file; in locl mode that
    means localhost:8188 should be queried, whereas in prod-mode the S3 bucket
    endpoint should be used.
    """
    file_url: builtins.str
    """example; `https://example.com/abc123.png`
    This can only be used as an input in local-mode, because in prod we do not
    trust user-supplied urls. However, in prod-mode file_url can still be used
    for outputs.
    """
    file_id: builtins.str
    """Used only in prod (s3); refers to a firestore document"""
    output_ref: builtins.str
    """Format: `node_name.output_name`"""
    @property
    def tensor(self) -> global___InputValue.Tensor: ...
    @property
    def file_raw(self) -> global___InputValue.File: ...
    @property
    def struct(self) -> global___InputValue.InputStruct: ...
    @property
    def list(self) -> global___InputValue.List: ...
    def __init__(
        self,
        *,
        null: global___InputValue.Null.ValueType = ...,
        number: builtins.float = ...,
        string: builtins.str = ...,
        bool: builtins.bool = ...,
        tensor: global___InputValue.Tensor | None = ...,
        file_raw: global___InputValue.File | None = ...,
        file_path: builtins.str = ...,
        file_url: builtins.str = ...,
        file_id: builtins.str = ...,
        output_ref: builtins.str = ...,
        struct: global___InputValue.InputStruct | None = ...,
        list: global___InputValue.List | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["bool", b"bool", "file_id", b"file_id", "file_path", b"file_path", "file_raw", b"file_raw", "file_url", b"file_url", "kind", b"kind", "list", b"list", "null", b"null", "number", b"number", "output_ref", b"output_ref", "string", b"string", "struct", b"struct", "tensor", b"tensor"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["bool", b"bool", "file_id", b"file_id", "file_path", b"file_path", "file_raw", b"file_raw", "file_url", b"file_url", "kind", b"kind", "list", b"list", "null", b"null", "number", b"number", "output_ref", b"output_ref", "string", b"string", "struct", b"struct", "tensor", b"tensor"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["kind", b"kind"]) -> typing.Literal["null", "number", "string", "bool", "tensor", "file_raw", "file_path", "file_url", "file_id", "output_ref", "struct", "list"] | None: ...

global___InputValue = InputValue

@typing.final
class OutputTemplate(google.protobuf.message.Message):
    """Same as InputValue, but only allowing for output_ref's"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class OutputStruct(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        @typing.final
        class FieldsEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor

            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: builtins.str
            @property
            def value(self) -> global___OutputTemplate: ...
            def __init__(
                self,
                *,
                key: builtins.str = ...,
                value: global___OutputTemplate | None = ...,
            ) -> None: ...
            def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

        FIELDS_FIELD_NUMBER: builtins.int
        @property
        def fields(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___OutputTemplate]: ...
        def __init__(
            self,
            *,
            fields: collections.abc.Mapping[builtins.str, global___OutputTemplate] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["fields", b"fields"]) -> None: ...

    @typing.final
    class List(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        OUTPUTS_FIELD_NUMBER: builtins.int
        @property
        def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OutputTemplate]: ...
        def __init__(
            self,
            *,
            outputs: collections.abc.Iterable[global___OutputTemplate] | None = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["outputs", b"outputs"]) -> None: ...

    STRING_FIELD_NUMBER: builtins.int
    OUTPUT_REF_FIELD_NUMBER: builtins.int
    STRUCT_FIELD_NUMBER: builtins.int
    LIST_FIELD_NUMBER: builtins.int
    string: builtins.str
    output_ref: builtins.str
    """Format: 'node_name.output_name'"""
    @property
    def struct(self) -> global___OutputTemplate.OutputStruct: ...
    @property
    def list(self) -> global___OutputTemplate.List: ...
    def __init__(
        self,
        *,
        string: builtins.str = ...,
        output_ref: builtins.str = ...,
        struct: global___OutputTemplate.OutputStruct | None = ...,
        list: global___OutputTemplate.List | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["kind", b"kind", "list", b"list", "output_ref", b"output_ref", "string", b"string", "struct", b"struct"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["kind", b"kind", "list", b"list", "output_ref", b"output_ref", "string", b"string", "struct", b"struct"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["kind", b"kind"]) -> typing.Literal["string", "output_ref", "struct", "list"] | None: ...

global___OutputTemplate = OutputTemplate

@typing.final
class WorkflowStep(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class InputsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___InputValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___InputValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    CLASS_TYPE_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    class_type: builtins.str
    """Please always use namespacing"""
    @property
    def inputs(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___InputValue]: ...
    def __init__(
        self,
        *,
        class_type: builtins.str = ...,
        inputs: collections.abc.Mapping[builtins.str, global___InputValue] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["class_type", b"class_type", "inputs", b"inputs"]) -> None: ...

global___WorkflowStep = WorkflowStep

@typing.final
class Workflow(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class NodesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___WorkflowStep: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___WorkflowStep | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing.final
    class OutputTemplateEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___OutputTemplate: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___OutputTemplate | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    NODES_FIELD_NUMBER: builtins.int
    OUTPUT_TEMPLATE_FIELD_NUMBER: builtins.int
    STREAM_NODE_EXECUTION_FIELD_NUMBER: builtins.int
    stream_node_execution: builtins.bool
    @property
    def nodes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___WorkflowStep]: ...
    @property
    def output_template(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___OutputTemplate]:
        """Specifies the output-object's shape"""

    def __init__(
        self,
        *,
        nodes: collections.abc.Mapping[builtins.str, global___WorkflowStep] | None = ...,
        output_template: collections.abc.Mapping[builtins.str, global___OutputTemplate] | None = ...,
        stream_node_execution: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["_stream_node_execution", b"_stream_node_execution", "stream_node_execution", b"stream_node_execution"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["_stream_node_execution", b"_stream_node_execution", "nodes", b"nodes", "output_template", b"output_template", "stream_node_execution", b"stream_node_execution"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["_stream_node_execution", b"_stream_node_execution"]) -> typing.Literal["stream_node_execution"] | None: ...

global___Workflow = Workflow
