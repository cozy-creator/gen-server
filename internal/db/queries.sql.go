// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (key_hash) VALUES (?) RETURNING id, key_hash, is_revoked, created_at
`

func (q *Queries) CreateAPIKey(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, createAPIKey, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.KeyHash,
		&i.IsRevoked,
		&i.CreatedAt,
	)
	return i, err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT id, key_hash, is_revoked, created_at FROM api_keys WHERE key_hash = ?
`

func (q *Queries) GetAPIKey(ctx context.Context, keyHash string) (ApiKey, error) {
	row := q.db.QueryRowContext(ctx, getAPIKey, keyHash)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.KeyHash,
		&i.IsRevoked,
		&i.CreatedAt,
	)
	return i, err
}

const revokeAPIKey = `-- name: RevokeAPIKey :exec
UPDATE api_keys SET is_revoked = ? WHERE key_hash = ? RETURNING id, key_hash, is_revoked, created_at
`

type RevokeAPIKeyParams struct {
	IsRevoked bool
	KeyHash   string
}

func (q *Queries) RevokeAPIKey(ctx context.Context, arg RevokeAPIKeyParams) error {
	_, err := q.db.ExecContext(ctx, revokeAPIKey, arg.IsRevoked, arg.KeyHash)
	return err
}
